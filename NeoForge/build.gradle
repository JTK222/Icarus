plugins {
    id 'idea'
    alias neoforge.plugins.neogradle
}

def usingJarJar = true

if(usingJarJar) {
    jarJar.enable()
}

repositories {
    maven {
        name = "TheIllusiveC4"
        url = "https://maven.theillusivec4.top"
    }
}

dependencies {
    implementation neoforge.neoforge
    compileOnly project(":Common")

    implementation libs.resourcefulconfig.neoforge
    implementation libs.commonnetworking.neoforge

    implementation neoforge.curios

    implementation neoforge.caelus

    compileOnly neoforge.cameraoverhaul
//    runtimeOnly fg.deobf(neoforge.cameraoverhaul.get())

    compileOnly libs.figura.neoforge
//    runtimeOnly libs.figura.neoforge

    // compileOnly "${libs.emi.neoforge.get()}:api"
}

if(usingJarJar) {
    jar {
        archiveClassifier.set("slim")
    }

    tasks.jarJar.configure {
        archiveClassifier.set('')
    }
}

subsystems {
    parchment {
        minecraftVersion = libs.versions.parchment.minecraft.get()
        mappingsVersion = libs.versions.parchment.mappings.get()
    }
}

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
def at = file('src/main/resources/META-INF/accesstransformer.cfg')
if (at.exists()) {
    minecraft.accessTransformers.file at
}

runs {
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        workingDirectory(project.file('run'))

        modSource project(":Common").sourceSets.main
        modSource sourceSets.main

        if (rootProject.hasProperty('mc_java_agent_path')) {
            jvmArg("-javaagent:${rootProject.mc_java_agent_path}")
        }
    }

    client {
        if (rootProject.hasProperty('mc_uuid')) {
            programArguments.addAll("--uuid", rootProject.mc_uuid)
        }

        if (rootProject.hasProperty('mc_username')) {
            programArguments.addAll("--username", rootProject.mc_username)
        }
    }

    server {
        programArgument '--nogui'
    }

    data {
        programArguments.addAll('--mod', mod_id, '--all', '--output', file('src/generated/resources/').absolutePath, '--existing', file('src/main/resources/').absolutePath)
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

tasks.named("compileJava", JavaCompile) {
    source(project(":Common").sourceSets.main.allJava)
}

tasks.named("javadoc", Javadoc) {
    source(project(":Common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}
